name: Test Podcast Workflow

# 手動觸發以便測試，新增模擬模式選項
on:
  workflow_dispatch:
    inputs:
      debug_mode:
        description: '啟用詳細 debug 模式'
        required: false
        default: 'true'
        type: boolean
      podcast_mode:
        description: '播客模式 (tw/us/auto)'
        required: true
        default: 'auto'
        type: choice
        options:
          - tw
          - us
          - auto
      simulate_time:
        description: '模擬時間 (HH:MM CST, 例如 06:00 或 14:00)'
        required: false
        default: '18:26'  # 當前時間約 18:26 CST

# 定義作業環境
jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          path: repo  # 直接使用 repo 作為單一目錄
      - name: Verify Repository Structure
        working-directory: repo
        run: |
          echo "📋 驗證倉庫結構"
          pwd  # 顯示當前工作目錄
          ls -la  # 列出所有檔案和目錄
          for dir in scripts data logs docs/podcast docs/rss .github/workflows; do
            if [ ! -d "$dir" ]; then 
              echo "⚠️  創建缺少的目錄: $dir"
              mkdir -p "$dir"
            fi
          done
          if [ ! -f "config.json" ]; then 
            echo "⚠️  創建默認 config.json"
            echo '{"version": "1.0", "debug": true}' > config.json
          fi
          ls -la scripts/ || echo "⚠️  scripts 目錄為空"
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      - name: Install Dependencies
        working-directory: repo
        run: |
          echo "📦 安裝依賴"
          pip install --upgrade pip
          pip install yfinance pandas backtrader numpy scikit-learn tensorflow requests feedparser edge-tts b2sdk
      - name: Set Environment Variables
        working-directory: repo
        run: |
          echo "🔑 設定環境變數"
          SIMULATED_HOUR=$(echo ${{ inputs.simulate_time }} | cut -d':' -f1)
          if [ "$SIMULATED_HOUR" = "06" ]; then
            echo "PODCAST_MODE=us" >> $GITHUB_ENV
          elif [ "$SIMULATED_HOUR" = "14" ]; then
            echo "PODCAST_MODE=tw" >> $GITHUB_ENV
          else
            echo "PODCAST_MODE=${{ github.event.inputs.podcast_mode || 'auto' }}" >> $GITHUB_ENV
          fi
          echo "MODE=manual" >> $GITHUB_ENV
          echo "MANUAL_TRIGGER=1" >> $GITHUB_ENV
          echo "USE_LLM=1" >> $GITHUB_ENV
          echo "REPORT_DIR=data" >> $GITHUB_ENV
          echo "DATA_DIR=data" >> $GITHUB_ENV
          echo "TARGET_RETURN=0.02" >> $GITHUB_ENV
          echo "GROK_API_KEY=${{ secrets.GROK_API_KEY }}" >> $GITHUB_ENV
          echo "B2_KEY_ID=${{ secrets.B2_KEY_ID }}" >> $GITHUB_ENV
          echo "B2_APPLICATION_KEY=${{ secrets.B2_APPLICATION_KEY }}" >> $GITHUB_ENV
          echo "B2_BUCKET_NAME=${{ secrets.B2_BUCKET_NAME }}" >> $GITHUB_ENV
          echo "SLACK_WEBHOOK_URL=${{ secrets.SLACK_WEBHOOK_URL }}" >> $GITHUB_ENV
          echo "DEBUG_MODE=${{ inputs.debug_mode }}" >> $GITHUB_ENV

  data-collection:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          path: repo
      - name: Run Data Collector
        working-directory: repo
        run: |
          echo "📥 開始執行資料收集員 (Data Collector) - 模式: $PODCAST_MODE"
          pwd  # 顯示當前工作目錄
          ls -la scripts/  # 檢查 scripts 目錄內容
          mkdir -p logs
          if [ ! -f "scripts/data_collector.py" ]; then
            echo "⚠️  data_collector.py 不存在，創建模擬腳本"
            cat > scripts/data_collector.py << 'EOF'
import os
import pandas as pd
from datetime import datetime

def main():
    print(f"數據收集開始 - 模式: {os.getenv('PODCAST_MODE', 'tw')}")
    data_dir = "data"
    os.makedirs(data_dir, exist_ok=True)
    dates = pd.date_range('2024-01-01', periods=100, freq='D')
    prices = 100 + (pd.Series(range(100)) * 0.1)
    df = pd.DataFrame({'Date': dates, 'Close': prices})
    filename = f"{data_dir}/daily_0050.TW.csv"
    df.to_csv(filename, index=False)
    print(f"✅ 數據已保存到: {filename}")
    with open("logs/data_collector.log", "w") as f:
        f.write(f"{datetime.now()}: Data collection completed\n")

if __name__ == "__main__":
    main()
EOF
          fi
          python scripts/data_collector.py
          if [ $? -ne 0 ]; then
            echo "❌ 資料收集員執行失敗，請檢查日誌: cat logs/data_collector.log"
            exit 1
          fi
          echo "✅ 資料收集員執行完成，檢查 data/ 目錄下的 CSV 檔案: ls -la data/"
        continue-on-error: false

  strategy-management:
    runs-on: ubuntu-latest
    needs: data-collection
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          path: repo
      - name: Run Strategy Manager
        working-directory: repo
        run: |
          echo "🤖 開始執行策略管理師 (Strategy Manager) - 模式: $PODCAST_MODE"
          pwd  # 顯示當前工作目錄
          ls -la scripts/  # 檢查 scripts 目錄內容
          mkdir -p logs
          if [ ! -f "scripts/strategy_manager.py" ]; then
            echo "⚠️  strategy_manager.py 不存在，創建模擬腳本"
            cat > scripts/strategy_manager.py << 'EOF'
import os
import json
import pandas as pd
from datetime import datetime

def main():
    print(f"策略分析開始 - 模式: {os.getenv('PODCAST_MODE', 'tw')}")
    df = pd.read_csv("data/daily_0050.TW.csv")
    strategy = {"name": "均線策略", "win_rate": 0.65}
    filename = f"data/strategy_best_{os.getenv('PODCAST_MODE', 'tw')}.json"
    with open(filename, 'w') as f:
        json.dump(strategy, f)
    print(f"✅ 策略結果已保存到: {filename}")
    with open("logs/strategy_manager.log", "w") as f:
        f.write(f"{datetime.now()}: Strategy analysis completed\n")

if __name__ == "__main__":
    main()
EOF
          fi
          python scripts/strategy_manager.py
          if [ $? -ne 0 ]; then
            echo "❌ 策略管理師執行失敗，請檢查日誌: cat logs/strategy_manager.log"
            exit 1
          fi
          echo "✅ 策略管理師執行完成，檢查 data/ 目錄下的 strategy_best_*.json: ls -la data/strategy_best_*.json"
        continue-on-error: false

  market-analysis:
    runs-on: ubuntu-latest
    needs: strategy-management
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          path: repo
      - name: Run Market Analyst
        working-directory: repo
        run: |
          echo "📊 開始執行市場分析師 (Market Analyst) - 模式: $PODCAST_MODE"
          pwd  # 顯示當前工作目錄
          ls -la scripts/  # 檢查 scripts 目錄內容
          mkdir -p logs
          if [ ! -f "scripts/market_analyst.py" ]; then
            echo "⚠️  market_analyst.py 不存在，創建模擬腳本"
            cat > scripts/market_analyst.py << 'EOF'
import os
import json
from datetime import datetime

def main():
    print(f"市場分析開始 - 模式: {os.getenv('PODCAST_MODE', 'tw')}")
    analysis = {"trend": "上升", "volatility": 0.1}
    filename = f"data/market_analysis_{os.getenv('PODCAST_MODE', 'tw')}.json"
    with open(filename, 'w') as f:
        json.dump(analysis, f)
    print(f"✅ 市場分析已保存到: {filename}")
    with open("logs/market_analyst.log", "w") as f:
        f.write(f"{datetime.now()}: Market analysis completed\n")

if __name__ == "__main__":
    main()
EOF
          fi
          python scripts/market_analyst.py
          if [ $? -ne 0 ]; then
            echo "❌ 市場分析師執行失敗，請檢查日誌: cat logs/market_analyst.log"
            exit 1
          fi
          echo "✅ 市場分析師執行完成，檢查 data/ 目錄下的 market_analysis_*.json: ls -la data/market_analysis_*.json"
        continue-on-error: false

  script-editing:
    runs-on: ubuntu-latest
    needs: market-analysis
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          path: repo
      - name: Run Script Editor
        working-directory: repo
        run: |
          echo "✍️ 開始執行文字編輯師 (Script Editor) - 模式: $PODCAST_MODE"
          pwd  # 顯示當前工作目錄
          ls -la scripts/  # 檢查 scripts 目錄內容
          mkdir -p "docs/podcast/$(date +%Y%m%d)_${PODCAST_MODE}"
          if [ ! -f "scripts/script_editor.py" ]; then
            echo "⚠️  script_editor.py 不存在，創建模擬腳本"
            cat > scripts/script_editor.py << 'EOF'
import os
from datetime import datetime

def main():
    print(f"腳本編輯開始 - 模式: {os.getenv('PODCAST_MODE', 'tw')}")
    date_str = datetime.now().strftime('%Y%m%d')
    script = f"這是模擬播客腳本 - 模式: {os.getenv('PODCAST_MODE', 'tw')}"
    with open(f"docs/podcast/{date_str}_{os.getenv('PODCAST_MODE', 'tw')}/script.txt", 'w') as f:
        f.write(script)
    print(f"✅ 腳本已保存")
    with open("logs/script_editor.log", "w") as f:
        f.write(f"{datetime.now()}: Script editing completed\n")

if __name__ == "__main__":
    main()
EOF
          fi
          python scripts/script_editor.py
          if [ $? -ne 0 ]; then
            echo "❌ 文字編輯師執行失敗，請檢查日誌: cat logs/script_editor.log"
            exit 1
          fi
          echo "✅ 文字編輯師執行完成，檢查 docs/podcast/YYYYMMDD_*/script.txt: ls -la docs/podcast/$(date +%Y%m%d)_*/script.txt"
        continue-on-error: false
        env:
          GROK_API_KEY: ${{ secrets.GROK_API_KEY }}

  podcast-production:
    runs-on: ubuntu-latest
    needs: script-editing
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          path: repo
      - name: Run Podcast Producer
        working-directory: repo
        run: |
          echo "🎙️ 開始執行播報員 (Podcast Producer) - 模式: $PODCAST_MODE"
          pwd  # 顯示當前工作目錄
          ls -la scripts/  # 檢查 scripts 目錄內容
          mkdir -p "docs/podcast/$(date +%Y%m%d)_${PODCAST_MODE}"
          if [ ! -f "scripts/podcast_producer.py" ]; then
            echo "⚠️  podcast_producer.py 不存在，創建模擬腳本"
            cat > scripts/podcast_producer.py << 'EOF'
import os
from datetime import datetime

def main():
    print(f"音頻生成開始 - 模式: {os.getenv('PODCAST_MODE', 'tw')}")
    date_str = datetime.now().strftime('%Y%m%d')
    with open(f"docs/podcast/{date_str}_{os.getenv('PODCAST_MODE', 'tw')}/audio.mp3", 'w') as f:
        f.write("模擬音頻數據")
    print(f"✅ 音頻已生成")
    with open("logs/podcast_producer.log", "w") as f:
        f.write(f"{datetime.now()}: Podcast production completed\n")

if __name__ == "__main__":
    main()
EOF
          fi
          python scripts/podcast_producer.py
          if [ $? -ne 0 ]; then
            echo "❌ 播報員執行失敗，請檢查日誌: cat logs/podcast_producer.log"
            exit 1
          fi
          echo "✅ 播報員執行完成，檢查 docs/podcast/YYYYMMDD_*/audio.mp3: ls -la docs/podcast/$(date +%Y%m%d)_*/audio.mp3"
        continue-on-error: false

  upload-management:
    runs-on: ubuntu-latest
    needs: podcast-production
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          path: repo
      - name: Run Upload Manager
        working-directory: repo
        run: |
          echo "☁️ 開始執行雲端上傳員 (Upload Manager) - 模式: $PODCAST_MODE"
          pwd  # 顯示當前工作目錄
          ls -la scripts/  # 檢查 scripts 目錄內容
          mkdir -p "docs/podcast/$(date +%Y%m%d)_${PODCAST_MODE}"
          if [ ! -f "scripts/upload_manager.py" ]; then
            echo "⚠️  upload_manager.py 不存在，創建模擬腳本"
            cat > scripts/upload_manager.py << 'EOF'
import os
from datetime import datetime

def main():
    print(f"雲端上傳開始 - 模式: {os.getenv('PODCAST_MODE', 'tw')}")
    date_str = datetime.now().strftime('%Y%m%d')
    with open(f"docs/podcast/{date_str}_{os.getenv('PODCAST_MODE', 'tw')}/archive_audio_url.txt", 'w') as f:
        f.write("https://example.com/audio.mp3")
    print(f"✅ 上傳完成")
    with open("logs/upload_manager.log", "w") as f:
        f.write(f"{datetime.now()}: Upload completed\n")

if __name__ == "__main__":
    main()
EOF
          fi
          python scripts/upload_manager.py
          if [ $? -ne 0 ]; then
            echo "❌ 雲端上傳員執行失敗，請檢查日誌: cat logs/upload_manager.log"
            exit 1
          fi
          echo "✅ 雲端上傳員執行完成，檢查 docs/podcast/YYYYMMDD_*/archive_audio_url.txt: ls -la docs/podcast/$(date +%Y%m%d)_*/archive_audio_url.txt"
        continue-on-error: false
        env:
          B2_KEY_ID: ${{ secrets.B2_KEY_ID }}
          B2_APPLICATION_KEY: ${{ secrets.B2_APPLICATION_KEY }}
          B2_BUCKET_NAME: ${{ secrets.B2_BUCKET_NAME }}

  feed-publishing:
    runs-on: ubuntu-latest
    needs: upload-management
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          path: repo
      - name: Run Feed Publisher
        working-directory: repo
        run: |
          echo "📡 開始執行推播員 (Feed Publisher) - 模式: $PODCAST_MODE"
          pwd  # 顯示當前工作目錄
          ls -la scripts/  # 檢查 scripts 目錄內容
          mkdir -p docs/rss
          if [ ! -f "scripts/feed_publisher.py" ]; then
            echo "⚠️  feed_publisher.py 不存在，創建模擬腳本"
            cat > scripts/feed_publisher.py << 'EOF'
import os
from datetime import datetime

def main():
    print(f"RSS 發布開始 - 模式: {os.getenv('PODCAST_MODE', 'tw')}")
    date_str = datetime.now().strftime('%Y%m%d')
    with open(f"docs/rss/podcast_{os.getenv('PODCAST_MODE', 'tw')}.xml", 'w') as f:
        f.write(f"<rss><channel><title>Podcast {os.getenv('PODCAST_MODE', 'tw')}</title></channel></rss>")
    print(f"✅ RSS 發布完成")
    with open("logs/feed_publisher.log", "w") as f:
        f.write(f"{datetime.now()}: Feed publishing completed\n")

if __name__ == "__main__":
    main()
EOF
          fi
          python scripts/feed_publisher.py
          if [ $? -ne 0 ]; then
            echo "❌ 推播員執行失敗，請檢查日誌: cat logs/feed_publisher.log"
            exit 1
          fi
          echo "✅ 推播員執行完成，檢查 docs/rss/podcast_*.xml: ls -la docs/rss/podcast_*.xml"
        continue-on-error: false
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # 額外步驟，檢查所有檔案並上傳
  finalize:
    runs-on: ubuntu-latest
    needs: [data-collection, strategy-management, market-analysis, script-editing, podcast-production, upload-management, feed-publishing]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          path: repo
      - name: Check Podcast Files
        working-directory: repo
        run: |
          date_str=$(date +%Y%m%d)
          for mode in tw us; do
            for subfile in docs/podcast/${date_str}_${mode}/script.txt docs/podcast/${date_str}_${mode}/audio.mp3 docs/podcast/${date_str}_${mode}/archive_audio_url.txt; do
              if [ -f "$subfile" ]; then
                echo "$subfile exists, last modified: $(stat -c %y "$subfile")"
              else
                echo "Warning: $subfile does not exist"
              fi
            done
          done
          for rss in docs/rss/podcast_tw.xml docs/rss/podcast_us.xml docs/rss/podcast.xml; do
            if [ -f "$rss" ]; then
              echo "$rss exists, last modified: $(stat -c %y "$rss")"
            else
              echo "Warning: $rss does not exist"
            fi
          done
      - name: Commit and Push Changes
        working-directory: repo
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"
          date_str=$(date +%Y%m%d)
          for mode in tw us; do
            if [ -f "docs/podcast/${date_str}_${mode}/script.txt" ]; then
              git add docs/podcast/${date_str}_${mode}/script.txt
            fi
            if [ -f "docs/podcast/${date_str}_${mode}/audio.mp3" ]; then
              git add docs/podcast/${date_str}_${mode}/audio.mp3
            fi
            if [ -f "docs/podcast/${date_str}_${mode}/archive_audio_url.txt" ]; then
              git add docs/podcast/${date_str}_${mode}/archive_audio_url.txt
            fi
          done
          if [ -f "docs/rss/podcast_tw.xml" ]; then
            git add docs/rss/podcast_tw.xml
          fi
          if [ -f "docs/rss/podcast_us.xml" ]; then
            git add docs/rss/podcast_us.xml
          fi
          if [ -f "docs/rss/podcast.xml" ]; then
            git add docs/rss/podcast.xml
          fi
          git commit -m "Update podcast files [skip ci]" || echo "No changes to commit"
          git push
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: podcast-reports-${{ github.run_id }}
          path: |
            repo/docs/podcast/*/*_tw/script.txt
            repo/docs/podcast/*/*_tw/audio.mp3
            repo/docs/podcast/*/*_tw/archive_audio_url.txt
            repo/docs/podcast/*/*_us/script.txt
            repo/docs/podcast/*/*_us/audio.mp3
            repo/docs/podcast/*/*_us/archive_audio_url.txt
            repo/docs/rss/podcast_tw.xml
            repo/docs/rss/podcast_us.xml
            repo/docs/rss/podcast.xml
          if-no-files-found: warn
          compression-level: 6
          overwrite: false
          include-hidden-files: false
