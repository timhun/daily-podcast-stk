name: Test Podcast Workflow

on:
  workflow_dispatch:
    inputs:
      debug_mode:
        description: '啟用詳細 debug 模式'
        required: false
        default: 'true'
        type: boolean
      podcast_mode:
        description: '播客模式 (tw/us/auto)'
        required: true
        default: 'auto'
        type: choice
        options:
          - tw
          - us
          - auto
      simulate_time:
        description: '模擬時間 (HH:MM CST, 例如 06:00 或 14:00)'
        required: false
        default: '17:49'

env:
  PYTHON_VERSION: '3.9'
  WORKING_DIR: 'repo'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      podcast_mode: ${{ steps.set-mode.outputs.podcast_mode }}
      date_str: ${{ steps.set-date.outputs.date_str }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.WORKING_DIR }}

      - name: Set Date and Mode
        id: set-date
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "date_str=$(date +%Y%m%d)" >> $GITHUB_OUTPUT

      - name: Determine Podcast Mode
        id: set-mode
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          SIMULATED_HOUR=$(echo ${{ inputs.simulate_time }} | cut -d':' -f1)
          if [ "${{ inputs.podcast_mode }}" = "auto" ]; then
            if [ "$SIMULATED_HOUR" = "06" ]; then
              PODCAST_MODE="us"
            elif [ "$SIMULATED_HOUR" = "14" ]; then
              PODCAST_MODE="tw"
            else
              PODCAST_MODE="tw"
            fi
          else
            PODCAST_MODE="${{ inputs.podcast_mode }}"
          fi
          echo "podcast_mode=$PODCAST_MODE" >> $GITHUB_OUTPUT
          echo "🎯 設定播客模式: $PODCAST_MODE"

      - name: Verify Repository Structure
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "📋 驗證倉庫結構"
          pwd && ls -la
          
          for dir in scripts data logs docs/podcast docs/rss .github/workflows; do
            if [ ! -d "$dir" ]; then 
              echo "⚠️  創建缺少的目錄: $dir"
              mkdir -p "$dir"
            fi
          done
          
          if [ ! -f "config.json" ]; then 
            echo "⚠️  創建默認 config.json"
            echo '{"version": "1.0", "debug": true}' > config.json
          fi
          
          echo "✅ 倉庫結構驗證完成"
          ls -la scripts/ || echo "⚠️  scripts 目錄為空"

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "📦 安裝 Python 依賴"
          pip install --upgrade pip
          pip install \
            yfinance pandas numpy scikit-learn \
            backtrader tensorflow requests feedparser \
            edge-tts b2sdk python-dotenv beautifulsoup4 \
            lxml matplotlib seaborn plotly dash

  data-collection:
    runs-on: ubuntu-latest
    needs: setup
    env:
      PODCAST_MODE: ${{ needs.setup.outputs.podcast_mode }}
      DATE_STR: ${{ needs.setup.outputs.date_str }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.WORKING_DIR }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          pip install --upgrade pip
          pip install yfinance pandas numpy scikit-learn requests python-dotenv

      - name: Set Environment Variables
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "🔑 設定環境變數"
          cat >> $GITHUB_ENV << EOF
          PODCAST_MODE=${{ env.PODCAST_MODE }}
          MODE=manual
          MANUAL_TRIGGER=1
          USE_LLM=1
          REPORT_DIR=data
          DATA_DIR=data
          TARGET_RETURN=0.02
          DEBUG_MODE=${{ inputs.debug_mode }}
          EOF

      - name: Run Data Collector
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "📥 開始執行資料收集員 (Data Collector) - 模式: $PODCAST_MODE"
          
          mkdir -p logs
          
          if [ ! -f "scripts/data_collector.py" ]; then
            echo "⚠️  data_collector.py 不存在，創建模擬腳本"
            mkdir -p scripts
            cat > scripts/data_collector.py << 'EOF'
          import os
          import json
          import pandas as pd
          from datetime import datetime

          def main():
              print(f"數據收集開始 - 模式: {os.getenv('PODCAST_MODE', 'tw')}")
              
              data_dir = "data"
              os.makedirs(data_dir, exist_ok=True)
              
              dates = pd.date_range('2024-01-01', periods=100, freq='D')
              prices = 100 + (pd.Series(range(100)) * 0.1) + (pd.Series([0.5, -0.3, 0.2] * 34)[:100])
              
              df = pd.DataFrame({
                  'Date': dates,
                  'Open': prices,
                  'High': prices * 1.02,
                  'Low': prices * 0.98,
                  'Close': prices * 1.01,
                  'Volume': 1000000
              })
              
              filename = f"{data_dir}/daily_0050.TW.csv"
              df.to_csv(filename, index=False)
              print(f"✅ 數據已保存到: {filename}")
              
              with open("logs/data_collector.log", "w") as f:
                  f.write(f"{datetime.now()}: Data collection completed successfully\n")

          if __name__ == "__main__":
              main()
          EOF
            python scripts/data_collector.py
          else
            python scripts/data_collector.py
          fi
          
          if [ -f "data/daily_0050.TW.csv" ]; then
            echo "✅ 資料收集完成，檔案大小: $(du -h data/daily_0050.TW.csv)"
          else
            echo "❌ 數據文件未生成"
            exit 1
          fi

      - name: Upload Data Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: collected-data-${{ env.DATE_STR }}
          path: |
            ${{ env.WORKING_DIR }}/data/*.csv
            ${{ env.WORKING_DIR }}/logs/data_collector.log
          retention-days: 7

  strategy-management:
    runs-on: ubuntu-latest
    needs: [setup, data-collection]
    env:
      PODCAST_MODE: ${{ needs.setup.outputs.podcast_mode }}
      DATE_STR: ${{ needs.setup.outputs.date_str }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.WORKING_DIR }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Download Data Artifacts
        uses: actions/download-artifact@v4
        with:
          name: collected-data-${{ env.DATE_STR }}
          path: ${{ env.WORKING_DIR }}

      - name: Install Dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          pip install --upgrade pip
          pip install pandas numpy backtrader scikit-learn python-dotenv

      - name: Run Strategy Manager
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "🤖 開始執行策略管理師 - 模式: $PODCAST_MODE"
          
          if [ ! -f "data/daily_0050.TW.csv" ]; then
            echo "❌ 找不到數據文件"
            exit 1
          fi
          
          if [ ! -f "scripts/strategy_manager.py" ]; then
            echo "⚠️  創建模擬策略管理腳本"
            cat > scripts/strategy_manager.py << 'EOF'
          import os
          import json
          import pandas as pd
          from datetime import datetime

          def main():
              print(f"策略分析開始 - 模式: {os.getenv('PODCAST_MODE', 'tw')}")
              
              df = pd.read_csv("data/daily_0050.TW.csv")
              print(f"讀取了 {len(df)} 筆數據")
              
              strategy_result = {
                  "strategy_name": "均線策略",
                  "total_return": 0.15,
                  "sharpe_ratio": 1.2,
                  "max_drawdown": -0.08,
                  "win_rate": 0.65,
                  "generated_at": datetime.now().isoformat(),
                  "mode": os.getenv('PODCAST_MODE', 'tw')
              }
              
              filename = f"data/strategy_best_{os.getenv('PODCAST_MODE', 'tw')}.json"
              with open(filename, 'w', encoding='utf-8') as f:
                  json.dump(strategy_result, f, ensure_ascii=False, indent=2)
              
              print(f"✅ 策略結果已保存到: {filename}")
              
              os.makedirs("logs", exist_ok=True)
              with open("logs/strategy_manager.log", "w") as f:
                  f.write(f"{datetime.now()}: Strategy analysis completed successfully\n")

          if __name__ == "__main__":
              main()
          EOF
          fi
          
          python scripts/strategy_manager.py
          
          expected_file="data/strategy_best_${PODCAST_MODE}.json"
          if [ -f "$expected_file" ]; then
            echo "✅ 策略分析完成: $expected_file"
            cat "$expected_file"
          else
            echo "❌ 策略文件未生成: $expected_file"
            exit 1
          fi

  market-analysis:
    runs-on: ubuntu-latest
    needs: [setup, data-collection, strategy-management]
    env:
      PODCAST_MODE: ${{ needs.setup.outputs.podcast_mode }}
      DATE_STR: ${{ needs.setup.outputs.date_str }}
      GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.WORKING_DIR }}

      - name: Set up Python and Dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          python -m pip install --upgrade pip
          pip install pandas numpy requests python-dotenv

      - name: Download Previous Artifacts
        uses: actions/download-artifact@v4
        with:
          name: collected-data-${{ env.DATE_STR }}
          path: ${{ env.WORKING_DIR }}

      - name: Run Market Analyst
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "📊 開始執行市場分析師 - 模式: $PODCAST_MODE"
          
          if [ ! -f "scripts/market_analyst.py" ]; then
            echo "⚠️  創建模擬市場分析腳本"
            cat > scripts/market_analyst.py << 'EOF'
          import os
          import json
          import pandas as pd
          from datetime import datetime

          def main():
              print(f"市場分析開始 - 模式: {os.getenv('PODCAST_MODE', 'tw')}")
              
              strategy_file = f"data/strategy_best_{os.getenv('PODCAST_MODE', 'tw')}.json"
              if os.path.exists(strategy_file):
                  with open(strategy_file, 'r', encoding='utf-8') as f:
                      strategy_data = json.load(f)
                  print(f"讀取策略數據: {strategy_data['strategy_name']}")
              
              market_analysis = {
                  "market_trend": "上升",
                  "volatility": 0.12,
                  "key_factors": ["央行政策", "通膨數據", "企業財報"],
                  "recommendations": {
                      "action": "持有",
                      "target_allocation": 0.7,
                      "risk_level": "中等"
                  },
                  "generated_at": datetime.now().isoformat(),
                  "mode": os.getenv('PODCAST_MODE', 'tw')
              }
              
              filename = f"data/market_analysis_{os.getenv('PODCAST_MODE', 'tw')}.json"
              with open(filename, 'w', encoding='utf-8') as f:
                  json.dump(market_analysis, f, ensure_ascii=False, indent=2)
              
              print(f"✅ 市場分析已保存到: {filename}")
              
              os.makedirs("logs", exist_ok=True)
              with open("logs/market_analyst.log", "w") as f:
                  f.write(f"{datetime.now()}: Market analysis completed successfully\n")

          if __name__ == "__main__":
              main()
          EOF
          fi
          
          python scripts/market_analyst.py
          
          expected_file="data/market_analysis_${PODCAST_MODE}.json"
          if [ -f "$expected_file" ]; then
            echo "✅ 市場分析完成: $expected_file"
          else
            echo "❌ 市場分析文件未生成"
            exit 1
          fi

  script-editing:
    runs-on: ubuntu-latest
    needs: [setup, market-analysis]
    env:
      PODCAST_MODE: ${{ needs.setup.outputs.podcast_mode }}
      DATE_STR: ${{ needs.setup.outputs.date_str }}
      GROK_API_KEY: ${{ secrets.GROK_API_KEY }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.WORKING_DIR }}

      - name: Download Previous Artifacts
        uses: actions/download-artifact@v4
        with:
          name: collected-data-${{ env.DATE_STR }}
          path: ${{ env.WORKING_DIR }}

      - name: Run Script Editor
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "✍️ 開始執行文字編輯師 - 模式: $PODCAST_MODE"
          
          mkdir -p "docs/podcast/${DATE_STR}_${PODCAST_MODE}"
          
          if [ ! -f "scripts/script_editor.py" ]; then
            echo "⚠️  創建模擬腳本編輯器"
            cat > scripts/script_editor.py << 'EOF'
          import os
          import json
          from datetime import datetime

          def main():
              podcast_mode = os.getenv('PODCAST_MODE', 'tw')
              date_str = datetime.now().strftime('%Y%m%d')
              
              print(f"腳本編輯開始 - 模式: {podcast_mode}")
              
              market_file = f"data/market_analysis_{podcast_mode}.json"
              strategy_file = f"data/strategy_best_{podcast_mode}.json"
              
              market_data = {}
              strategy_data = {}
              
              if os.path.exists(market_file):
                  with open(market_file, 'r', encoding='utf-8') as f:
                      market_data = json.load(f)
              
              if os.path.exists(strategy_file):
                  with open(strategy_file, 'r', encoding='utf-8') as f:
                      strategy_data = json.load(f)
              
              market_name = "台股" if podcast_mode == "tw" else "美股"
              
              script = f"""歡迎收聽今日的{market_name}投資分析播客！

          今天是 {datetime.now().strftime('%Y年%m月%d日')}，我是您的AI投資分析師。

          【市場概況】
          根據最新的技術分析，{market_name}市場目前呈現{market_data.get('market_trend', '穩定')}趨勢。
          市場波動度為 {market_data.get('volatility', 0.1):.1%}，屬於{market_data.get('recommendations', {}).get('risk_level', '中等')}風險水平。

          【策略分析】
          我們的{strategy_data.get('strategy_name', '量化策略')}顯示：
          - 總回報率：{strategy_data.get('total_return', 0.1):.1%}
          - 夏普比率：{strategy_data.get('sharpe_ratio', 1.0):.2f}
          - 最大回撤：{strategy_data.get('max_drawdown', -0.05):.1%}
          - 勝率：{strategy_data.get('win_rate', 0.6):.1%}

          【投資建議】
          基於當前分析，建議投資者採取{market_data.get('recommendations', {}).get('action', '觀望')}策略，
          目標配置比例為 {market_data.get('recommendations', {}).get('target_allocation', 0.5):.1%}。

          【風險提醒】
          投資有風險，請務必根據自身風險承受能力做出決策。

          感謝您的收聽，我們明天見！
          """
              
              script_dir = f"docs/podcast/{date_str}_{podcast_mode}"
              os.makedirs(script_dir, exist_ok=True)
              script_file = f"{script_dir}/script.txt"
              
              with open(script_file, 'w', encoding='utf-8') as f:
                  f.write(script)
              
              print(f"✅ 播客腳本已保存到: {script_file}")
              
              os.makedirs("logs", exist_ok=True)
              with open("logs/script_editor.log", "w") as f:
                  f.write(f"{datetime.now()}: Script editing completed successfully\n")

          if __name__ == "__main__":
              main()
          EOF
          fi
          
          python scripts/script_editor.py
          
          script_file="docs/podcast/${DATE_STR}_${PODCAST_MODE}/script.txt"
          if [ -f "$script_file" ]; then
            echo "✅ 腳本編輯完成: $script_file"
            echo "腳本長度: $(wc -c < "$script_file") 字符"
          else
            echo "❌ 腳本文件未生成"
            exit 1
          fi

  podcast-production:
    runs-on: ubuntu-latest
    needs: [setup, script-editing]
    env:
      PODCAST_MODE: ${{ needs.setup.outputs.podcast_mode }}
      DATE_STR: ${{ needs.setup.outputs.date_str }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.WORKING_DIR }}

      - name: Install Dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          pip install edge-tts python-dotenv

      - name: Run Podcast Producer
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "🎙️ 開始執行播報員 - 模式: $PODCAST_MODE"
          
          script_file="docs/podcast/${DATE_STR}_${PODCAST_MODE}/script.txt"
          audio_file="docs/podcast/${DATE_STR}_${PODCAST_MODE}/audio.mp3"
          
          if [ ! -f "$script_file" ]; then
            echo "❌ 找不到腳本文件: $script_file"
            exit 1
          fi
          
          if [ ! -f "scripts/podcast_producer.py" ]; then
            echo "⚠️  創建模擬播報員腳本"
            cat > scripts/podcast_producer.py << 'EOF'
          import os
          import asyncio
          import edge_tts
          from datetime import datetime

          async def main():
              podcast_mode = os.getenv('PODCAST_MODE', 'tw')
              date_str = datetime.now().strftime('%Y%m%d')
              
              print(f"音頻生成開始 - 模式: {podcast_mode}")
              
              script_file = f"docs/podcast/{date_str}_{podcast_mode}/script.txt"
              audio_file = f"docs/podcast/{date_str}_{podcast_mode}/audio.mp3"
              
              if not os.path.exists(script_file):
                  print(f"❌ 腳本文件不存在: {script_file}")
                  return
              
              with open(script_file, 'r', encoding='utf-8') as f:
                  text = f.read()
              
              voice = "zh-TW-HsiaoChenNeural" if podcast_mode == "tw" else "en-US-AriaNeural"
              
              communicate = edge_tts.Communicate(text, voice)
              await communicate.save(audio_file)
              
              print(f"✅ 音頻已生成: {audio_file}")
              
              os.makedirs("logs", exist_ok=True)
              with open("logs/podcast_producer.log", "w") as f:
                  f.write(f"{datetime.now()}: Podcast production completed successfully\n")

          if __name__ == "__main__":
              asyncio.run(main())
          EOF
          fi
          
          python scripts/podcast_producer.py
          
          if [ -f "$audio_file" ]; then
            echo "✅ 播客音頻生成完成: $audio_file"
            echo "音頻大小: $(du -h "$audio_file")"
          else
            echo "❌ 音頻文件未生成"
            exit 1
          fi

  upload-management:
    runs-on: ubuntu-latest
    needs: [setup, podcast-production]
    env:
      PODCAST_MODE: ${{ needs.setup.outputs.podcast_mode }}
      DATE_STR: ${{ needs.setup.outputs.date_str }}
      B2_KEY_ID: ${{ secrets.B2_KEY_ID }}
      B2_APPLICATION_KEY: ${{ secrets.B2_APPLICATION_KEY }}
      B2_BUCKET_NAME: ${{ secrets.B2_BUCKET_NAME }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.WORKING_DIR }}

      - name: Install Dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          pip install b2sdk python-dotenv

      - name: Run Upload Manager
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "☁️ 開始執行雲端上傳員 - 模式: $PODCAST_MODE"
          
          audio_file="docs/podcast/${DATE_STR}_${PODCAST_MODE}/audio.mp3"
          url_file="docs/podcast/${DATE_STR}_${PODCAST_MODE}/archive_audio_url.txt"
          
          if [ ! -f "$audio_file" ]; then
            echo "❌ 找不到音頻文件: $audio_file"
            exit 1
          fi
          
          if [ ! -f "scripts/upload_manager.py" ]; then
            echo "⚠️  創建模擬上傳管理腳本"
            cat > scripts/upload_manager.py << 'EOF'
          import os
          from datetime import datetime

          def main():
              podcast_mode = os.getenv('PODCAST_MODE', 'tw')
              date_str = datetime.now().strftime('%Y%m%d')
              
              print(f"雲端上傳開始 - 模式: {podcast_mode}")
              
              audio_file = f"docs/podcast/{date_str}_{podcast_mode}/audio.mp3"
              url_file = f"docs/podcast/{date_str}_{podcast_mode}/archive_audio_url.txt"
              
              if not os.path.exists(audio_file):
                  print(f"❌ 音頻文件不存在: {audio_file}")
                  return
              
              mock_url = f"https://example-bucket.s3.amazonaws.com/podcast/{date_str}_{podcast_mode}/audio.mp3"
              
              with open(url_file, 'w') as f:
                  f.write(mock_url)
              
              print(f"✅ 模擬上傳完成，URL已保存: {url_file}")
              print(f"📎 音頻 URL: {mock_url}")
              
              os.makedirs("logs", exist_ok=True)
              with open("logs/upload_manager.log", "w") as f:
                  f.write(f"{datetime.now()}: Upload completed successfully to {mock_url}\n")

          if __name__ == "__main__":
              main()
          EOF
          fi
          
          python scripts/upload_manager.py
          
          if [ -f "$url_file" ]; then
            echo "✅ 雲端上傳完成: $url_file"
            echo "上傳 URL: $(cat "$url_file")"
          else
            echo "❌ URL 文件未生成"
            exit 1
          fi

  feed-publishing:
    runs-on: ubuntu-latest
    needs: [setup, upload-management]
    env:
      PODCAST_MODE: ${{ needs.setup.outputs.podcast_mode }}
      DATE_STR: ${{ needs.setup.outputs.date_str }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.WORKING_DIR }}

      - name: Install Dependencies
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          pip install feedparser requests python-dotenv

      - name: Run Feed Publisher
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "📡 開始執行推播員 - 模式: $PODCAST_MODE"
          
          if [ ! -f "scripts/feed_publisher.py" ]; then
            echo "⚠️  創建模擬 RSS 發布腳本"
            cat > scripts/feed_publisher.py << 'EOF'
          import os
          import json
          from datetime import datetime
          from xml.etree.ElementTree import Element, SubElement, tostring
          from xml.dom import minidom

          def create_rss_feed(mode, date_str):
              rss = Element('rss', version='2.0')
              rss.set('xmlns:itunes', 'http://www.itunes.com/dtds/podcast-1.0.dtd')
              
              channel = SubElement(rss, 'channel')
              
              title = f"{'台股' if mode == 'tw' else '美股'}投資分析播客"
              SubElement(channel, 'title').text = title
              SubElement(channel, 'description').text = f"每日{title}，AI智能分析"
              SubElement(channel, 'language').text = 'zh-TW' if mode == 'tw' else 'en-US'
              
              url_file = f"docs/podcast/{date_str}_{mode}/archive_audio_url.txt"
              if os.path.exists(url_file):
                  with open(url_file, 'r') as f:
                      audio_url = f.read().strip()
              else:
                  audio_url = f"https://example.com/podcast/{date_str}_{mode}/audio.mp3"
              
              item = SubElement(channel, 'item')
              SubElement(item, 'title').text = f"{title} - {date_str}"
              SubElement(item, 'description').text = f"{datetime.now().strftime('%Y年%m月%d日')}的市場分析"
              SubElement(item, 'pubDate').text = datetime.now().strftime('%a, %d %b %Y %H:%M:%S +0800')
              
              enclosure = SubElement(item, 'enclosure')
              enclosure.set('url', audio_url)
              enclosure.set('type', 'audio/mpeg')
              enclosure.set('length', '1048576')
              
              return rss

          def main():
              podcast_mode = os.getenv('PODCAST_MODE', 'tw')
              date_str = datetime.now().strftime('%Y%m%d')
              
              print(f"RSS 發布開始 - 模式: {podcast_mode}")
              
              os.makedirs("docs/rss", exist_ok=True)
              
              rss = create_rss_feed(podcast_mode, date_str)
              
              rough_string = tostring(rss, 'utf-8')
              reparsed = minidom.parseString(rough_string)
              pretty_xml = reparsed.toprettyxml(indent="  ", encoding='utf-8').decode('utf-8')
              
              rss_file = f"docs/rss/podcast_{podcast_mode}.xml"
              with open(rss_file, 'w', encoding='utf-8') as f:
                  f.write(pretty_xml)
              
              general_rss_file = "docs/rss/podcast.xml"
              with open(general_rss_file, 'w', encoding='utf-8') as f:
                  f.write(pretty_xml)
              
              print(f"✅ RSS feed 已更新: {rss_file}")
              print(f"✅ 通用 RSS feed 已更新: {general_rss_file}")
              
              slack_webhook = os.getenv('SLACK_WEBHOOK_URL')
              if slack_webhook:
                  import requests
                  message = {
                      "text": f"🎙️ 播客已發布！模式: {podcast_mode}, 日期: {date_str}",
                      "attachments": [{
                          "color": "good",
                          "fields": [
                              {"title": "RSS Feed", "value": rss_file, "short": True},
                              {"title": "模式", "value": podcast_mode, "short": True}
                          ]
                      }]
                  }
                  try:
                      response = requests.post(slack_webhook, json=message)
                      if response.status_code == 200:
                          print("✅ Slack 通知已發送")
                      else:
                          print(f"⚠️ Slack 通知發送失敗: {response.status_code}")
                  except Exception as e:
                      print(f"⚠️ Slack 通知發送錯誤: {e}")
              
              os.makedirs("logs", exist_ok=True)
              with open("logs/feed_publisher.log", "w") as f:
                  f.write(f"{datetime.now()}: Feed publishing completed successfully\n")

          if __name__ == "__main__":
              main()
          EOF
          fi
          
          python scripts/feed_publisher.py
          
          rss_file="docs/rss/podcast_${PODCAST_MODE}.xml"
          if [ -f "$rss_file" ]; then
            echo "✅ RSS feed 發布完成: $rss_file"
            echo "RSS 文件大小: $(du -h "$rss_file")"
          else
            echo "❌ RSS 文件未生成"
            exit 1
          fi

  finalize:
    runs-on: ubuntu-latest
    needs: [setup, data-collection, strategy-management, market-analysis, script-editing, podcast-production, upload-management, feed-publishing]
    env:
      DATE_STR: ${{ needs.setup.outputs.date_str }}
      PODCAST_MODE: ${{ needs.setup.outputs.podcast_mode }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.WORKING_DIR }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Download All Artifacts
        uses: actions/download-artifact@v4
        with:
          name: collected-data-${{ env.DATE_STR }}
          path: ${{ env.WORKING_DIR }}

      - name: Comprehensive File Check
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "🔍 進行最終文件檢查"
          echo "當前目錄: $(pwd)"
          echo "播客模式: $PODCAST_MODE"
          echo "日期: $DATE_STR"
          
          echo ""
          echo "📊 數據文件:"
          find data -name "*.csv" -o -name "*.json" | while read file; do
            if [ -f "$file" ]; then
              echo "✅ $file ($(du -h "$file" | cut -f1))"
            else
              echo "❌ $file 缺失"
            fi
          done
          
          echo ""
          echo "🎙️ 播客文件:"
          podcast_dir="docs/podcast/${DATE_STR}_${PODCAST_MODE}"
          for file in script.txt audio.mp3 archive_audio_url.txt; do
            full_path="$podcast_dir/$file"
            if [ -f "$full_path" ]; then
              echo "✅ $full_path ($(du -h "$full_path" | cut -f1))"
            else
              echo "❌ $full_path 缺失"
            fi
          done
          
          echo ""
          echo "📡 RSS 文件:"
          for rss in docs/rss/podcast_${PODCAST_MODE}.xml docs/rss/podcast.xml; do
            if [ -f "$rss" ]; then
              echo "✅ $rss ($(du -h "$rss" | cut -f1))"
            else
              echo "❌ $rss 缺失"
            fi
          done
          
          echo ""
          echo "📝 日誌文件:"
          find logs -name "*.log" | while read log; do
            if [ -f "$log" ]; then
              echo "✅ $log (最後修改: $(stat -c %y "$log" 2>/dev/null || date))"
              echo "   最新日誌: $(tail -1 "$log" 2>/dev/null || echo 'N/A')"
            else
              echo "❌ $log 缺失"
            fi
          done

      - name: Generate Summary Report
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "📋 生成執行摘要報告"
          
          report_file="workflow_summary_${DATE_STR}_${PODCAST_MODE}.md"
          
          cat > "$report_file" << EOF
          # 播客工作流執行摘要

          **執行時間**: $(date)
          **播客模式**: $PODCAST_MODE
          **日期標識**: $DATE_STR
          **GitHub Run ID**: ${{ github.run_id }}

          ## 執行結果

          ### 📥 數據收集
          $([ -f "data/daily_0050.TW.csv" ] && echo "✅ 完成" || echo "❌ 失敗")
          - 數據文件: $(find data -name "*.csv" | wc -l) 個

          ### 🤖 策略分析  
          $([ -f "data/strategy_best_${PODCAST_MODE}.json" ] && echo "✅ 完成" || echo "❌ 失敗")
          - 策略文件: data/strategy_best_${PODCAST_MODE}.json

          ### 📊 市場分析
          $([ -f "data/market_analysis_${PODCAST_MODE}.json" ] && echo "✅ 完成" || echo "❌ 失敗")  
          - 分析文件: data/market_analysis_${PODCAST_MODE}.json

          ### ✍️ 腳本編輯
          $([ -f "docs/podcast/${DATE_STR}_${PODCAST_MODE}/script.txt" ] && echo "✅ 完成" || echo "❌ 失敗")
          - 腳本長度: $([ -f "docs/podcast/${DATE_STR}_${PODCAST_MODE}/script.txt" ] && wc -c < "docs/podcast/${DATE_STR}_${PODCAST_MODE}/script.txt" || echo "0") 字符

          ### 🎙️ 音頻生成
          $([ -f "docs/podcast/${DATE_STR}_${PODCAST_MODE}/audio.mp3" ] && echo "✅ 完成" || echo "❌ 失敗")
          - 音頻大小: $([ -f "docs/podcast/${DATE_STR}_${PODCAST_MODE}/audio.mp3" ] && du -h "docs/podcast/${DATE_STR}_${PODCAST_MODE}/audio.mp3" | cut -f1 || echo "0B")

          ### ☁️ 雲端上傳  
          $([ -f "docs/podcast/${DATE_STR}_${PODCAST_MODE}/archive_audio_url.txt" ] && echo "✅ 完成" || echo "❌ 失敗")
          - 音頻 URL: $([ -f "docs/podcast/${DATE_STR}_${PODCAST_MODE}/archive_audio_url.txt" ] && cat "docs/podcast/${DATE_STR}_${PODCAST_MODE}/archive_audio_url.txt" || echo "N/A")

          ### 📡 RSS 發布
          $([ -f "docs/rss/podcast_${PODCAST_MODE}.xml" ] && echo "✅ 完成" || echo "❌ 失敗")
          - RSS 文件: docs/rss/podcast_${PODCAST_MODE}.xml

          ## 文件清單
          \`\`\`
          $(find docs data logs -type f | sort)
          \`\`\`

          ---
          *由 GitHub Actions 自動生成 @ $(date)*
          EOF
          
          echo "✅ 摘要報告已生成: $report_file"
          cat "$report_file"

      - name: Commit and Push Changes
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo "💾 提交更改到 Git 倉庫"
          
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          git add -A
          
          if git diff --staged --quiet; then
            echo "ℹ️  沒有文件需要提交"
          else
            echo "📝 提交更改..."
            git commit -m "🤖 自動生成播客內容 [${PODCAST_MODE}] - ${DATE_STR}

            - 模式: ${PODCAST_MODE}  
            - 日期: ${DATE_STR}
            - 工作流: ${{ github.workflow }}
            - 運行 ID: ${{ github.run_id }}
            
            [skip ci]"
            
            git push
            echo "✅ 更改已推送到倉庫"
          fi

      - name: Upload Final Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: podcast-complete-${{ env.DATE_STR }}-${{ env.PODCAST_MODE }}
          path: |
            ${{ env.WORKING_DIR }}/docs/podcast/*
            ${{ env.WORKING_DIR }}/docs/rss/*
            ${{ env.WORKING_DIR }}/data/*
            ${{ env.WORKING_DIR }}/logs/*
            ${{ env.WORKING_DIR }}/workflow_summary_*.md
          retention-days: 30
          compression-level: 6

      - name: Workflow Summary
        working-directory: ${{ env.WORKING_DIR }}
        run: |
          echo ""
          echo "🎉 播客工作流執行完成！"
          echo "=============================="
          echo "📅 日期: $DATE_STR"
          echo "🎯 模式: $PODCAST_MODE"  
          echo "⏱️  總執行時間: ${{ github.workflow }} #${{ github.run_number }}"
          echo ""
          echo "📊 生成的文件:"
          echo "- 數據: $(find data -type f | wc -l) 個文件"
          echo "- 播客: $(find docs/podcast -type f | wc -l) 個文件" 
          echo "- RSS: $(find docs/rss -type f | wc -l) 個文件"
          echo "- 日誌: $(find logs -type f | wc -l) 個文件"
          echo ""
          echo "🔗 重要鏈接:"
          echo "- RSS Feed: docs/rss/podcast_${PODCAST_MODE}.xml"
          echo "- 播客腳本: docs/podcast/${DATE_STR}_${PODCAST_MODE}/script.txt"
          echo "- 音頻文件: docs/podcast/${DATE_STR}_${PODCAST_MODE}/audio.mp3"
          echo ""
          echo "✅ 工作流執行成功！"
